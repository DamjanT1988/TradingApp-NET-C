@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Capacity Chart";
}

<h2>Capacity Chart</h2>

<!-- Display any error messages -->
@if (ViewBag.UMMErrorMessage != null)
{
    <div class="alert alert-danger">
        <strong>UMM API Error:</strong> @ViewBag.UMMErrorMessage
    </div>
}

@if (ViewBag.RSSErrorMessage != null)
{
    <div class="alert alert-danger">
        <strong>RSS Feed Error:</strong> @ViewBag.RSSErrorMessage
    </div>
}

<!-- Canvas elements for UMM and RSS charts -->
<h3>UMM Data Chart</h3>
<select id="areaFilter">
    <option value="All">All Areas</option>
    <option value="SE2">SE2</option>
    <option value="BE">BE</option>
    <option value="FR">FR</option>
</select>
<canvas id="ummCapacityChart"></canvas>

<h3>RSS Data Chart</h3>
<canvas id="rssCapacityChart"></canvas>

<!-- Real-time WebSocket message display -->
<h3>WebSocket Real-Time UMM Updates</h3>
<ul id="wsMessages"></ul> <!-- Real-time messages will appear here -->
<!-- Chart.js Library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    var ummData = @Html.Raw(ViewBag.UMMDataJson ?? "[]");
    var rssData = @Html.Raw(ViewBag.RSSDataJson ?? "[]");

    const fuelTypeMapping = {
        "1": "Fossil Hard Coal",
        "2": "Fossil Brown Coal",
        "3": "Fossil Oil",
        "4": "Nuclear",
        "5": "Fossil Gas",
        "6": "Geothermal",
        "7": "Hydro Pumped Storage",
        "8": "Hydro Run-of-River",
        "9": "Hydro Reservoir",
        "11": "Wind Onshore",
        "12": "Wind Offshore",
        "13": "Solar",
        "100": "Unknown"
    };

    function aggregateDataByProductionType(ummData, selectedArea = 'All') {
        let aggregatedData = {};

        ummData.forEach(item => {
            if (!item.productionUnits || item.productionUnits.length === 0) return;

            item.productionUnits.forEach(unit => {
                if (selectedArea !== 'All' && unit.areaName !== selectedArea) return;

                let productionType = fuelTypeMapping[unit.fuelType] || `Unknown (${unit.fuelType})`;

                unit.timePeriods.forEach(period => {
                    if (!aggregatedData[productionType]) {
                        aggregatedData[productionType] = 0;
                    }
                    aggregatedData[productionType] += period.unavailableCapacity;
                });
            });
        });

        return aggregatedData;
    }

    function updateUMMChart(selectedArea) {
        var aggregatedData = aggregateDataByProductionType(ummData, selectedArea);

        var ummLabels = Object.keys(aggregatedData);
        var ummCapacity = Object.values(aggregatedData);

        ummCapacityChart.data.labels = ummLabels;
        ummCapacityChart.data.datasets[0].data = ummCapacity;
        ummCapacityChart.update();
    }

    // Initialize UMM Chart
    var ctxUMM = document.getElementById('ummCapacityChart').getContext('2d');
    var ummCapacityChart = new Chart(ctxUMM, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: 'UMM Unavailable Capacity (MW)',
                data: [],
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Unavailable Capacity (MW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Production Types'
                    }
                }
            }
        }
    });

    document.getElementById('areaFilter').addEventListener('change', function () {
        var selectedArea = this.value;
        updateUMMChart(selectedArea);
    });

    updateUMMChart('All');

    // Initialize RSS Chart
    var ctxRSS = document.getElementById('rssCapacityChart').getContext('2d');
    var rssCapacityChart = new Chart(ctxRSS, {
        type: 'bar',
        data: {
            labels: rssData.map(item => item.ProductionType),
            datasets: [{
                label: 'RSS Unavailable Capacity (MW)',
                data: rssData.map(item => item.UnavailableCapacity),
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Unavailable Capacity (MW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Production Types'
                    }
                }
            }
        }
    });

    // SignalR WebSocket setup
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/ummhub")
        .build();

    connection.on("ReceiveUMMMessage", function (message) {
        const wsMessagesList = document.getElementById("wsMessages");
        let listItem = document.createElement("li");
        listItem.textContent = `Real-time UMM Update: ${message}`;
        wsMessagesList.appendChild(listItem);

        // Optionally, parse the message and update the UMM chart with new data
        // updateUMMChartFromMessage(message);
    });

    connection.start().then(function () {
        console.log("SignalR connected.");
    }).catch(function (err) {
        console.error(err.toString());
    });
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
